from aiogram import Router, types, F
from aiogram.types import CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from bot.keyboards.inline import get_sources_menu, get_source_list_keyboard
from bot.database.db import add_source, get_user_sources, delete_source
from bot.parsers.telegram_parser import validate_telegram_channel
from bot.config import load_config


sources_router = Router()


class AddSourceFSM(StatesGroup):
    waiting_url = State()
    waiting_telegram_url = State()


@sources_router.callback_query(F.data == "menu:sources")
async def open_sources_menu(callback: CallbackQuery):
    await callback.message.edit_text("–ú–µ–Ω—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:", reply_markup=get_sources_menu())
    await callback.answer()


@sources_router.callback_query(F.data == "sources:list")
async def list_sources(callback: CallbackQuery):
    sources = await get_user_sources(callback.from_user.id)
    if not sources:
        try:
            await callback.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.", reply_markup=get_sources_menu())
        except Exception:
            await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.", reply_markup=get_sources_menu())
        return await callback.answer()
    
    try:
        await callback.message.edit_text("–í–∞—à–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:", reply_markup=get_source_list_keyboard(sources))
    except Exception:
        await callback.message.answer("–í–∞—à–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:", reply_markup=get_source_list_keyboard(sources))
    await callback.answer()


@sources_router.callback_query(F.data == "sources:add_telegram")
async def add_telegram_start(callback: CallbackQuery, state: FSMContext):
    config = load_config()
    if not config.api_id or not config.api_hash:
        await callback.message.edit_text(
            "‚ùå Telegram API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
            "–î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram-–∫–∞–Ω–∞–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "1. –ó–∞–π—Ç–∏ –Ω–∞ https://my.telegram.org\n"
            "2. –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å API_ID, API_HASH\n"
            "3. –£–∫–∞–∑–∞—Ç—å –∏—Ö –≤ —Ñ–∞–π–ª–µ .env\n\n"
            "–ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ RSS –∏–ª–∏ –≤–µ–±-—Å–∞–π—Ç—ã.",
            reply_markup=get_sources_menu()
        )
        return await callback.answer()

    await state.set_state(AddSourceFSM.waiting_telegram_url)
    await callback.message.edit_text(
        "üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram-–∫–∞–Ω–∞–ª:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ @channel_name\n"
        "‚Ä¢ https://t.me/channel_name\n"
        "‚Ä¢ t.me/channel_name\n\n"
        "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram API."
    )
    await callback.answer()


@sources_router.callback_query(F.data == "sources:add_rss")
async def add_rss_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddSourceFSM.waiting_url)
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL RSS-–ª–µ–Ω—Ç—ã:")
    await callback.answer()


@sources_router.callback_query(F.data == "sources:add_web")
async def add_web_start(callback: CallbackQuery, state: FSMContext):
    await state.update_data(type='website')
    await state.set_state(AddSourceFSM.waiting_url)
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL —Å–∞–π—Ç–∞:")
    await callback.answer()


@sources_router.message(AddSourceFSM.waiting_telegram_url)
async def receive_telegram_url(message: types.Message, state: FSMContext):
    url = message.text.strip()
    config = load_config()
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL
    if url.startswith("https://t.me/"):
        url = url.replace("https://t.me/", "@")
    elif url.startswith("t.me/"):
        url = "@" + url.replace("t.me/", "")
    elif not url.startswith("@"):
        url = "@" + url
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞
    try:
        is_valid = await validate_telegram_channel(
            url, 
            config.api_id, 
            config.api_hash, 
            config.phone_number
        )
        
        if not is_valid:
            await message.answer(
                "‚ùå –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏\n"
                "‚Ä¢ –ü—É–±–ª–∏—á–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞\n"
                "‚Ä¢ –ù–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É:",
                reply_markup=get_sources_menu()
            )
            await state.clear()
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        await add_source(message.from_user.id, 'telegram', url)
        await state.clear()
        await message.answer(f"‚úÖ Telegram-–∫–∞–Ω–∞–ª {url} –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_sources_menu())
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ RSS/–≤–µ–±-—Å–∞–π—Ç—ã.",
            reply_markup=get_sources_menu()
        )
        await state.clear()


@sources_router.message(AddSourceFSM.waiting_url)
async def receive_source_url(message: types.Message, state: FSMContext):
    url = message.text.strip()
    data = await state.get_data()
    type_ = data.get('type')
    if not (url.startswith("http://") or url.startswith("https://")):
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http(s)://")
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è; –¥–µ—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–µ–ª–∞–µ–º –Ω–∞ —ç—Ç–∞–ø–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    await add_source(message.from_user.id, type_, url)
    await state.clear()
    await message.answer("–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_sources_menu())


@sources_router.callback_query(F.data.startswith("sources:del:"))
async def delete_source_cb(callback: CallbackQuery):
    try:
        source_id = int(callback.data.split(":")[-1])
    except ValueError:
        return await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", show_alert=True)
    await delete_source(source_id, callback.from_user.id)
    sources = await get_user_sources(callback.from_user.id)
    text = "–ò—Å—Ç–æ—á–Ω–∏–∫ —É–¥–∞–ª–µ–Ω."
    try:
        if sources:
            await callback.message.edit_text(text, reply_markup=get_source_list_keyboard(sources))
        else:
            await callback.message.edit_text(text + "\n–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.", reply_markup=get_sources_menu())
    except Exception:
        if sources:
            await callback.message.answer(text, reply_markup=get_source_list_keyboard(sources))
        else:
            await callback.message.answer(text + "\n–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.", reply_markup=get_sources_menu())
    await callback.answer()


