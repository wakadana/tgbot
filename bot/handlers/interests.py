from aiogram import Router, types, F
from aiogram.types import CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from bot.keyboards.inline import get_interests_menu, get_interest_list_keyboard, get_popular_topics_keyboard
from bot.database.db import add_interest, get_user_interests, delete_interest


interests_router = Router()


class AddInterestFSM(StatesGroup):
    waiting_text = State()


@interests_router.callback_query(F.data == "menu:interests")
async def open_interests_menu(callback: CallbackQuery):
    await callback.message.edit_text("–ú–µ–Ω—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:", reply_markup=get_interests_menu())
    await callback.answer()


@interests_router.callback_query(F.data == "interests:list")
async def list_interests(callback: CallbackQuery):
    interests = await get_user_interests(callback.from_user.id)
    if not interests:
        try:
            await callback.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.", reply_markup=get_interests_menu())
        except Exception:
            await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.", reply_markup=get_interests_menu())
        return await callback.answer()
    
    try:
        await callback.message.edit_text("–í–∞—à–∏ —Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:", reply_markup=get_interest_list_keyboard(interests))
    except Exception:
        await callback.message.answer("–í–∞—à–∏ —Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:", reply_markup=get_interest_list_keyboard(interests))
    await callback.answer()


@interests_router.callback_query(F.data == "interests:add")
async def add_interest_start(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
            reply_markup=get_popular_topics_keyboard()
        )
    except Exception:
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
            reply_markup=get_popular_topics_keyboard()
        )
    await callback.answer()


# –°–ª–æ–≤–∞—Ä—å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º
POPULAR_TOPICS = {
    "tech": "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
    "ai": "ü§ñ –ò–ò –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", 
    "mobile": "üì± –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
    "crypto": "üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
    "stocks": "üìà –§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫",
    "finance": "üè¶ –ë–∞–Ω–∫–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã",
    "politics": "üèõÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞",
    "world": "üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
    "law": "‚öñÔ∏è –ü—Ä–∞–≤–æ –∏ –∑–∞–∫–æ–Ω—ã",
    "science": "üî¨ –ù–∞—É–∫–∞",
    "medicine": "üè• –ú–µ–¥–∏—Ü–∏–Ω–∞",
    "ecology": "üå± –≠–∫–æ–ª–æ–≥–∏—è",
    "sports": "‚öΩ –°–ø–æ—Ä—Ç",
    "movies": "üé¨ –ö–∏–Ω–æ –∏ —Å–µ—Ä–∏–∞–ª—ã",
    "gaming": "üéÆ –ò–≥—Ä—ã",
    "startups": "üöÄ –°—Ç–∞—Ä—Ç–∞–ø—ã",
    "business": "üíº –ë–∏–∑–Ω–µ—Å",
    "ecommerce": "üõí E-commerce"
}

@interests_router.callback_query(F.data.startswith("topic:"))
async def select_popular_topic(callback: CallbackQuery):
    topic_key = callback.data.split(":", 1)[1]
    if topic_key in POPULAR_TOPICS:
        topic_text = POPULAR_TOPICS[topic_key]
        await add_interest(callback.from_user.id, topic_text)
        try:
            await callback.message.edit_text(
                f"‚úÖ –¢–µ–º–∞ '{topic_text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –æ–¥–Ω—É —Ç–µ–º—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:",
                reply_markup=get_popular_topics_keyboard()
            )
        except Exception:
            await callback.message.answer(
                f"‚úÖ –¢–µ–º–∞ '{topic_text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –æ–¥–Ω—É —Ç–µ–º—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:",
                reply_markup=get_popular_topics_keyboard()
            )
    await callback.answer()


@interests_router.callback_query(F.data == "interests:add_manual")
async def add_interest_manual(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddInterestFSM.waiting_text)
    try:
        await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ç–µ–º—ã/–∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
    except Exception:
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ç–µ–º—ã/–∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):")
    await callback.answer()


@interests_router.message(AddInterestFSM.waiting_text)
async def receive_interest_text(message: types.Message, state: FSMContext):
    text = (message.text or "").strip()
    if not text or len(text) > 100:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.")
    await add_interest(message.from_user.id, text)
    await state.clear()
    await message.answer("–¢–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_interests_menu())


@interests_router.callback_query(F.data.startswith("interests:del:"))
async def delete_interest_cb(callback: CallbackQuery):
    try:
        interest_id = int(callback.data.split(":")[-1])
    except ValueError:
        return await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", show_alert=True)
    await delete_interest(interest_id, callback.from_user.id)
    interests = await get_user_interests(callback.from_user.id)
    text = "–¢–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞."
    try:
        if interests:
            await callback.message.edit_text(text, reply_markup=get_interest_list_keyboard(interests))
        else:
            await callback.message.edit_text(text + "\n–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —Ç–µ–º.", reply_markup=get_interests_menu())
    except Exception:
        if interests:
            await callback.message.answer(text, reply_markup=get_interest_list_keyboard(interests))
        else:
            await callback.message.answer(text + "\n–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —Ç–µ–º.", reply_markup=get_interests_menu())
    await callback.answer()


